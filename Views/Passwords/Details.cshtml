@model PasswordStoreApp.Models.Password

@{
    ViewData["Title"] = "Details";
}



<h1>Details</h1>
<img class="logo" src="~/Read.jpg" alt="Delete">

<div class="password-details">
    <h4>Password</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Site)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Site)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Username)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Username)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Pass)
        </dt>
        <dd class="col-sm-10" id="password">
            @Html.DisplayFor(model => model.Pass)
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Note)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Note)
        </dd>
        <!-- Display password strength using JavaScript -->
        <dd class="col-sm-10">
            <script>
                var passwordElement = document.getElementById("password");
                var passwordStrength = checkPasswordStrength(passwordElement.innerText);

                var strengthElement = document.createElement("p");
                strengthElement.innerText = "Password Strength: " + passwordStrength;
                strengthElement.classList.add("password-strength");

                // Apply different styles based on the strength
                if (passwordStrength === "Weak") {
                    strengthElement.classList.add("weak");

                    // Run OpenAI logic only if the password is weak
                    askOpenAI();
                } else if (passwordStrength === "Strong") {
                    strengthElement.classList.add("strong");
                }

                // Append strengthElement to the password-details container
                document.querySelector('.password-details').appendChild(strengthElement);

                function checkPasswordStrength(password) {
                    // Your updated password strength criteria here
                    var hasLength = password.length >= 8; // Minimum length of 8 characters
                    var hasLowercase = /[a-z]/.test(password);
                    var hasUppercase = /[A-Z]/.test(password);
                    var hasDigit = /\d/.test(password);
                    var hasSpecialChar = /[!#$%^&*()_+]/.test(password); // Add more special characters as needed

                    // Check if all criteria are met
                    if (hasLength && hasLowercase && hasUppercase && hasDigit && hasSpecialChar) {
                        return "Strong";
                    } else {
                        return "Weak";
                    }
                }

                // Request assistance from OpenAI only if the password is weak
                async function askOpenAI() {
                    try {
                        // Make an asynchronous request to OpenAI API
                        const response = await fetch("https://api.openai.com/v1/engines/text-davinci-003/completions", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": "Bearer OPENAI_API_KEY",
                            },
                            body: JSON.stringify({
                                prompt: 'Suggest one 8 character length strong passwords',
                            }),
                        });

                        const result = await response.json();
                        console.log('OpenAI Response:', result);

                        // Log the OpenAI-generated password for debugging
                        console.log('OpenAI Generated Password:', result.choices[0]?.text || "No result");

                        // Create a box/container for the OpenAI response
                        var openAIBox = document.createElement("div");
                        openAIBox.classList.add("openai-box");

                        // Display only the result text inside the box
                        var openAIResponseElement = document.createElement("p");
                        openAIResponseElement.innerText = "Check out the strong password generated by OpenAI below: " + result.choices[0]?.text || "No result";

                        // Append the response element to the box
                        openAIBox.appendChild(openAIResponseElement);

                        // Append the box to the password-details container
                        document.querySelector('.password-details').appendChild(openAIBox);

                        // You can further process or display the OpenAI response as needed in your application
                    } catch (error) {
                        console.error('Error contacting OpenAI:', error);
                    }
                }
            </script>
        </dd>
    </dl>
</div>

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
